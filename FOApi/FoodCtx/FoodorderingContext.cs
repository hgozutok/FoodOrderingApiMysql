// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace FOApi
{
    public partial class FoodorderingContext : DbContext
    {
        public FoodorderingContext()
        {
        }

        public FoodorderingContext(DbContextOptions<FoodorderingContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Tblcustomer> Tblcustomers { get; set; }
        public virtual DbSet<Tblmenu> Tblmenus { get; set; }
        public virtual DbSet<Tblmenutype> Tblmenutypes { get; set; }
        public virtual DbSet<Tblorder> Tblorders { get; set; }
        public virtual DbSet<Tblorderdetail> Tblorderdetails { get; set; }
        public virtual DbSet<Tblpayment> Tblpayments { get; set; }
        public virtual DbSet<Tblrating> Tblratings { get; set; }
        public virtual DbSet<Tblsiteinfo> Tblsiteinfos { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Tblcustomer>(entity =>
            {
                entity.HasKey(e => e.CustomerId)
                    .HasName("PK__tblcusto__CD65CB8569082E71");

                entity.ToTable("tblcustomer");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.AccountStatus).HasColumnName("account_status");

                entity.Property(e => e.CustomerEmail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customer_email");

                entity.Property(e => e.CustomerFirstName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("customer_first_name");

                entity.Property(e => e.CustomerLandline)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("customer_landline");

                entity.Property(e => e.CustomerLastName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("customer_last_name");

                entity.Property(e => e.CustomerMiddleName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("customer_middle_name");

                entity.Property(e => e.CustomerPassword)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("customer_password");

                entity.Property(e => e.CustomerPhoneNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("customer_phone_number");

                entity.Property(e => e.CustomerUsername)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("customer_username");

                entity.Property(e => e.ProfileImage)
                    .IsRequired()
                    .HasColumnName("profile_image");
            });

            modelBuilder.Entity<Tblmenu>(entity =>
            {
                entity.HasKey(e => e.MenuId)
                    .HasName("PK__tblmenu__4CA0FADCD53B6BFE");

                entity.ToTable("tblmenu");

                entity.Property(e => e.MenuId).HasColumnName("menu_id");

                entity.Property(e => e.Ingredients)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ingredients");

                entity.Property(e => e.MenuImage)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("menu_image");

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("menu_name");

                entity.Property(e => e.MenuStatus).HasColumnName("menu_status");

                entity.Property(e => e.MenuTypeId).HasColumnName("menu_type_id");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.HasOne(d => d.MenuType)
                    .WithMany(p => p.Tblmenus)
                    .HasForeignKey(d => d.MenuTypeId)
                    .HasConstraintName("tblmenu_ibfk_1");
            });

            modelBuilder.Entity<Tblmenutype>(entity =>
            {
                entity.HasKey(e => e.MenuTypeId)
                    .HasName("PK__tblmenut__8AE0A7B2A6D79623");

                entity.ToTable("tblmenutype");

                entity.Property(e => e.MenuTypeId).HasColumnName("menu_type_id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_name");
            });

            modelBuilder.Entity<Tblorder>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("PK__tblorder__465962290C67A7EE");

                entity.ToTable("tblorder");

                entity.HasIndex(e => new { e.CustomerId, e.ProcessedBy }, "customer_id");

                entity.HasIndex(e => e.ProcessedBy, "processed_by");

                entity.Property(e => e.OrderId).HasColumnName("order_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("date")
                    .HasColumnName("order_date");

                entity.Property(e => e.OrderStatus).HasColumnName("order_status");

                entity.Property(e => e.ProcessedBy).HasColumnName("processed_by");

                entity.Property(e => e.TotalAmount).HasColumnName("total_amount");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Tblorders)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("tblorder_ibfk_2");
            });

            modelBuilder.Entity<Tblorderdetail>(entity =>
            {
                entity.HasKey(e => e.OrderDetailsId)
                    .HasName("PK__tblorder__F6FB5AE433A70A0C");

                entity.ToTable("tblorderdetails");

                entity.HasIndex(e => e.MenuId, "menu_id");

                entity.HasIndex(e => new { e.OrderId, e.MenuId }, "order_id");

                entity.Property(e => e.OrderDetailsId).HasColumnName("order_details_id");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.MenuId).HasColumnName("menu_id");

                entity.Property(e => e.NoOfServing).HasColumnName("no_of_serving");

                entity.Property(e => e.OrderId).HasColumnName("order_id");

                entity.Property(e => e.TotalAmount).HasColumnName("total_amount");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Tblorderdetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblorderdetails_tblorder");
            });

            modelBuilder.Entity<Tblpayment>(entity =>
            {
                entity.HasKey(e => e.PaymentId)
                    .HasName("PK__tblpayme__ED1FC9EA15980E15");

                entity.ToTable("tblpayment");

                entity.HasIndex(e => new { e.OrderId, e.ProcessedBy }, "order_id");

                entity.HasIndex(e => e.ProcessedBy, "processed_by");

                entity.Property(e => e.PaymentId).HasColumnName("payment_id");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.OrderId).HasColumnName("order_id");

                entity.Property(e => e.PaidBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("paid_by");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("date")
                    .HasColumnName("payment_date");

                entity.Property(e => e.ProcessedBy).HasColumnName("processed_by");
            });

            modelBuilder.Entity<Tblrating>(entity =>
            {
                entity.HasKey(e => e.RatingId)
                    .HasName("PK__tblratin__D35B278B0AEDB3A9");

                entity.ToTable("tblrating");

                entity.HasIndex(e => e.CustomerId, "customer_id");

                entity.HasIndex(e => e.MenuId, "menu_id");

                entity.Property(e => e.RatingId).HasColumnName("rating_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.DateRecorded)
                    .HasColumnType("date")
                    .HasColumnName("date_recorded");

                entity.Property(e => e.MenuId).HasColumnName("menu_id");

                entity.Property(e => e.Remarks)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("remarks");

                entity.Property(e => e.Score).HasColumnName("score");
            });

            modelBuilder.Entity<Tblsiteinfo>(entity =>
            {
                entity.HasKey(e => e.SiteInfoId)
                    .HasName("PK__tblsitei__866ED2E476E90763");

                entity.ToTable("tblsiteinfo");

                entity.HasIndex(e => e.UserId, "user_id");

                entity.Property(e => e.SiteInfoId).HasColumnName("site_info_id");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.ContactInfo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("contact_info");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.LastUpdate)
                    .HasColumnType("date")
                    .HasColumnName("last_update");

                entity.Property(e => e.SiteName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("site_name");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}